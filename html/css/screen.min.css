@import url("https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700,900");html{box-sizing:border-box}*,*::after,*::before{box-sizing:inherit}.block{max-width:1200px;width:100%;margin:0 auto;display:block}.a_button,.a_button.primary,.a_button.primary:before,.a_button.tertiary,.a_button.tertiary:before,.a_button.tertiary:hover{transition:all 0.2s ease-in-out}.clear:after{content:"";clear:both;display:table}body{font-family:Source Sans Pro,helvetica,Arial;margin:0px;padding:0px}.image{transition:all 0.3s ease-in-out}div.modifiers{width:700px;margin:0 auto}div.modifiers input[type="select"],div.modifiers h4{display:inline-block;margin-bottom:7px}div.modifiers h3{margin-bottom:5px;font-weight:700;border-bottom:2px solid}div.modifiers>div{display:inline-block;padding-right:40px}/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}dfn{font-style:italic}h1{font-size:2em;margin:.75em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}figure{margin:1.5em 40px}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace, monospace;font-size:1em}button,input,optgroup,select,textarea{margin:0}button{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}input{overflow:visible}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;display:table;max-width:100%;white-space:normal;color:inherit;padding:0}optgroup{font-weight:bold}textarea{overflow:auto}*{box-sizing:border-box}body,html{display:block;height:100%;position:relative;font-family:Source Sans Pro,helvetica,Arial;scroll-behavior:smooth}body{font-size:62.5%;position:relative}html{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.block::after{clear:both;content:"";display:block}.disable-hover{pointer-events:none}b,strong{font-weight:700}i,em{font-style:italic}input,button{-webkit-appearance:none;-moz-appearance:none;-ms-appearance:none;-o-appearance:none;appearance:none;outline:none;border:none;background:transparent;padding:0;margin:0;font-family:Source Sans Pro,helvetica,Arial}input:focus,textarea:focus,button,input[type="submit"]{outline:none}button,input[type="submit"]{cursor:pointer}::-webkit-scrollbar{width:0.8em}::-webkit-scrollbar-track{background-color:#070707}::-webkit-scrollbar-thumb{background:#1b2029}ul,ol{padding:0;margin:0;list-style-type:none}figure{margin:0;padding:0}fieldset{padding:0;margin:0;min-width:auto;border:none}input,textarea,select,button{font-size:1em}menu{padding:0;margin:0}.fixed{position:fixed}.aria-hidden,.visually-hidden{display:none}body.flex{display:flex}body.flex div.wrapper{width:100%}.aria-hidden{display:none}.background-color-white{background-color:#fff;position:relative;z-index:1}.background-color-primary{background-color:#dc1f26;position:relative;z-index:1}.background-color-light-primary{position:relative;z-index:1}.background-color-grey{background-color:#86888c;position:relative;z-index:1}.background-color-light-grey{background-color:#eef1f5;position:relative;z-index:1}.background-color-dark{background-color:#070707;position:relative;z-index:1}.background-color-dark-blue{background-color:#070707;position:relative;z-index:1}.border-top-on{border-top:1px solid #86888c}.border-bottom-on{border-bottom:1px solid #86888c}.a_button{font-size:14px;padding:0.75em 1.5em 0.8em;text-decoration:none;color:inherit;font-weight:700;display:inline-block;border:2px solid inherit;font-family:Source Sans Pro,helvetica,Arial;text-transform:uppercase;letter-spacing:0.15em}.a_button.primary{background-color:#dc1f26;color:#fff;border:2px solid #dc1f26;position:relative;transition-duration:0.2s}.a_button.primary:before{content:"";background-color:#6d6f72;display:block;width:100%;height:100%;top:-2px;left:-2px;position:absolute;z-index:-1}.a_button.primary:hover:before{top:6px;left:6px}.a_button.primary:disabled{background-color:#86888c;border-color:#86888c;cursor:not-allowed}.a_button.primary:disabled:before{content:none}.a_button.secondary{background-color:#fff;color:#dc1f26;border:2px solid #dc1f26}.a_button.tertiary{background-color:#fff;color:#dc1f26;position:relative}.a_button.tertiary:hover{top:-2px;left:-2px}.a_button.tertiary:hover:before{content:"";background-color:#697282;display:block;width:100%;height:100%;top:6px;left:6px;position:absolute;z-index:-1}.margin-top-large{margin-top:60px}.margin-top-normal{margin-top:40px}.margin-top-slim{margin-top:20px}.margin-top-none{margin-top:0px}.margin-bottom-large{margin-bottom:60px}.margin-bottom-normal{margin-bottom:40px}.margin-bottom-slim{margin-bottom:20px}.margin-bottom-none{margin-bottom:0px}.padding-top-large{padding-top:60px}.padding-top-normal{padding-top:40px}.padding-top-slim{padding-top:20px}.padding-top-none{padding-top:0px}.padding-bottom-large{padding-bottom:60px}.padding-bottom-normal{padding-bottom:40px}.padding-bottom-slim{padding-bottom:20px}.padding-bottom-none{padding-bottom:0px}.text-align-center{text-align:center}.text-align-right{text-align:right}.text-align-left{text-align:left}section h2{line-height:1;letter-spacing:2px}section p{font-size:1.6em}section p a{color:#dc1f26}.width-full-width{max-width:100%;padding-right:1em;padding-left:1em}.width-block{margin-right:auto;margin-left:auto;max-width:1165px;padding-right:1em;padding-left:1em}div.copy-width{max-width:600px;margin:0 auto}@media all and (min-width: 1165px){.width-full-width,.width-block{padding-left:0px;padding-right:0px}}div#player{display:block;position:absolute;top:50%;left:50%;height:60px;margin-top:-30px;width:40px;margin-left:-20px;color:#fff;background-color:blue}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
